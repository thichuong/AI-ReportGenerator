import os
import gc
import threading
import time
from datetime import datetime, timezone, timedelta
import pytz
from google import genai
from google.genai import types
from .report_workflow import generate_auto_research_report_langgraph
from .progress_tracker import progress_tracker





def generate_auto_research_report(api_key, max_attempts=3):
    """
    Wrapper function cho LangGraph workflow V2 ƒë·ªÉ gi·ªØ t∆∞∆°ng th√≠ch v·ªõi code c≈©.
    
    Args:
        api_key (str): API key c·ªßa Gemini
        max_attempts (int): S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa ƒë·ªÉ t·∫°o b√°o c√°o PASS
        
    Returns:
        dict: K·∫øt qu·∫£ workflow v·ªõi success status v√† report_id
    """
    try:
        result = generate_auto_research_report_langgraph(api_key, max_attempts)
        
        # ƒê·∫£m b·∫£o tr·∫£ v·ªÅ dict format
        if isinstance(result, dict):
            return result
        else:
            # Fallback cho backward compatibility
            return {'success': bool(result), 'report_id': None}
            
    except Exception as e:
        print(f"‚ùå Error in generate_auto_research_report: {e}")
        return {
            'success': False, 
            'error': str(e),
            'report_id': None
        }


def schedule_auto_report(api_key, schedule_times=None):
    """
    L√™n l·ªãch t·ª± ƒë·ªông t·∫°o b√°o c√°o theo khung gi·ªù c·ªë ƒë·ªãnh h√†ng ng√†y.
    
    Args:
        api_key (str): API key c·ªßa Gemini
        schedule_times (list): List c√°c khung gi·ªù ch·∫°y b√°o c√°o (format: "HH:MM")
                              M·∫∑c ƒë·ªãnh: ["07:30", "15:00", "19:00"] (gi·ªù Vi·ªát Nam)
    """
    if schedule_times is None:
        schedule_times = ["07:30", "15:00", "19:00"]  # Khung gi·ªù m·∫∑c ƒë·ªãnh
    
    # Timezone Vi·ªát Nam
    vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    
    def get_next_run_time():
        """T√≠nh to√°n th·ªùi gian ch·∫°y ti·∫øp theo."""
        now = datetime.now(vietnam_tz)
        today = now.date()
        
        # T√¨m khung gi·ªù ti·∫øp theo trong ng√†y
        for time_str in schedule_times:
            hour, minute = map(int, time_str.split(':'))
            scheduled_time = vietnam_tz.localize(
                datetime.combine(today, datetime.min.time().replace(hour=hour, minute=minute))
            )
            
            if scheduled_time > now:
                return scheduled_time
        
        # N·∫øu kh√¥ng c√≥ khung gi·ªù n√†o c√≤n l·∫°i trong ng√†y, l·∫•y khung ƒë·∫ßu ti√™n c·ªßa ng√†y mai
        tomorrow = today + timedelta(days=1)
        hour, minute = map(int, schedule_times[0].split(':'))
        next_run = vietnam_tz.localize(
            datetime.combine(tomorrow, datetime.min.time().replace(hour=hour, minute=minute))
        )
        return next_run
    
    def run_scheduler():
        consecutive_failures = 0
        max_consecutive_failures = 3
        retry_run_time = None  # Bi·∫øn l∆∞u th·ªùi gian retry sau 30p
        
        print(f"[{datetime.now(vietnam_tz)}] üéØ Auto report scheduler kh·ªüi ƒë·ªông v·ªõi khung gi·ªù: {', '.join(schedule_times)} (GMT+7)")
        
        while True:
            try:
                # T√≠nh to√°n th·ªùi gian ch·∫°y ti·∫øp theo
                now = datetime.now(vietnam_tz)
                scheduled_next_run = get_next_run_time()
                
                # So s√°nh retry_run_time (30p) v√† scheduled_next_run, ch·ªçn c√°i n√†o s·ªõm h∆°n
                if retry_run_time is not None:
                    next_run = min(retry_run_time, scheduled_next_run)
                    if next_run == retry_run_time:
                        print(f"[{now}] üîÑ S·ª≠ d·ª•ng retry time (30p) thay v√¨ scheduled time")
                else:
                    next_run = scheduled_next_run
                
                wait_seconds = (next_run - now).total_seconds()
                
                if wait_seconds > 0:
                    print(f"[{now}] ‚è∞ Scheduler: Ch·∫°y ti·∫øp theo v√†o {next_run.strftime('%Y-%m-%d %H:%M:%S %Z')}")
                    time.sleep(wait_seconds)
                
                # Ki·ªÉm tra l·∫°i th·ªùi gian sau khi sleep (c√≥ th·ªÉ b·ªã drift)
                now = datetime.now(vietnam_tz)
                current_time = now.strftime("%H:%M")
                
                # N·∫øu ƒëang retry (c√≥ retry_run_time), kh√¥ng c·∫ßn check khung gi·ªù
                is_retry = (retry_run_time is not None and abs((now - retry_run_time).total_seconds()) <= 300)
                
                if not is_retry:
                    # Ki·ªÉm tra xem c√≥ ƒë√∫ng khung gi·ªù kh√¥ng (v·ªõi tolerance 5 ph√∫t)
                    should_run = False
                    for time_str in schedule_times:
                        scheduled_hour, scheduled_minute = map(int, time_str.split(':'))
                        scheduled_time = now.replace(hour=scheduled_hour, minute=scheduled_minute, second=0, microsecond=0)
                        time_diff = abs((now - scheduled_time).total_seconds())
                        
                        if time_diff <= 300:  # Tolerance 5 ph√∫t
                            should_run = True
                            break
                    
                    if not should_run:
                        print(f"[{now}] ‚ö†Ô∏è Scheduler: Kh√¥ng ƒë√∫ng khung gi·ªù, skip...")
                        retry_run_time = None  # Reset retry time n·∫øu skip
                        continue
                else:
                    print(f"[{now}] üîÑ Scheduler: Retry run - skipping schedule check")
                
                # Reset retry_run_time tr∆∞·ªõc khi ch·∫°y b√°o c√°o
                retry_run_time = None
                
                print(f"[{now}] üöÄ Scheduler: B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o t·ª± ƒë·ªông (khung {current_time})...")
                start_time = datetime.now(vietnam_tz)
                
                # Ch·∫°y t·∫°o b√°o c√°o v·ªõi s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa
                max_attempts = int(os.getenv('MAX_REPORT_ATTEMPTS', '3'))
                result = generate_auto_research_report(api_key, max_attempts)
                
                if isinstance(result, dict) and result.get('success'):
                    consecutive_failures = 0  # Reset failure counter
                    retry_run_time = None  # Reset retry time khi th√†nh c√¥ng
                    end_time = datetime.now(vietnam_tz)
                    duration = (end_time - start_time).total_seconds()
                    report_id = result.get('report_id')
                    print(f"[{end_time}] ‚úÖ Scheduler: B√°o c√°o #{report_id} t·∫°o th√†nh c√¥ng trong {duration:.1f}s (khung {current_time})")
                    
                    # Gi·∫£i ph√≥ng b·ªô nh·ªõ sau khi ho√†n th√†nh b√°o c√°o
                    del result
                    gc.collect()
                    print(f"[{datetime.now(vietnam_tz)}] üßπ Memory cleanup completed")
                    
                elif isinstance(result, bool) and result:
                    consecutive_failures = 0  # Reset failure counter
                    retry_run_time = None  # Reset retry time khi th√†nh c√¥ng
                    end_time = datetime.now(vietnam_tz)
                    duration = (end_time - start_time).total_seconds()
                    print(f"[{end_time}] ‚úÖ Scheduler: B√°o c√°o t·∫°o th√†nh c√¥ng trong {duration:.1f}s (khung {current_time})")
                    
                    # Gi·∫£i ph√≥ng b·ªô nh·ªõ
                    del result
                    gc.collect()
                    print(f"[{datetime.now(vietnam_tz)}] üßπ Memory cleanup completed")
                else:
                    consecutive_failures += 1
                    error_info = ""
                    if isinstance(result, dict) and result.get('errors'):
                        error_info = f" - Errors: {result['errors'][:2]}"  # Show first 2 errors
                    
                    print(f"[{datetime.now(vietnam_tz)}] ‚ùå Scheduler: T·∫°o b√°o c√°o th·∫•t b·∫°i ({consecutive_failures}/{max_consecutive_failures}){error_info}")
                    
                    # Gi·∫£i ph√≥ng b·ªô nh·ªõ ngay c·∫£ khi th·∫•t b·∫°i
                    del result
                    gc.collect()
                    
                    # N·∫øu th·∫•t b·∫°i li√™n ti·∫øp qu√° nhi·ªÅu, skip t·ªõi khung gi·ªù ti·∫øp theo
                    if consecutive_failures >= max_consecutive_failures:
                        print(f"[{datetime.now(vietnam_tz)}] ‚ö†Ô∏è Scheduler: Too many failures, skipping to next scheduled time...")
                        consecutive_failures = 0  # Reset counter
                        retry_run_time = None  # Reset retry time
                        continue
                    
                    # Thi·∫øt l·∫≠p retry time l√† 30 ph√∫t t·ª´ b√¢y gi·ªù
                    retry_wait_minutes = 30
                    retry_run_time = datetime.now(vietnam_tz) + timedelta(minutes=retry_wait_minutes)
                    print(f"[{datetime.now(vietnam_tz)}] üîÑ Scheduler: ƒê·∫∑t retry time sau {retry_wait_minutes} ph√∫t v√†o {retry_run_time.strftime('%H:%M:%S')}")
                    continue  # Quay l·∫°i v√≤ng l·∫∑p ƒë·ªÉ t√≠nh to√°n next_run m·ªõi
                    
            except Exception as e:
                consecutive_failures += 1
                print(f"[{datetime.now(vietnam_tz)}] ‚ùå Scheduler error ({consecutive_failures}/{max_consecutive_failures}): {e}")
                
                # Gi·∫£i ph√≥ng b·ªô nh·ªõ khi c√≥ exception
                gc.collect()
                
                # N·∫øu l·ªói li√™n ti·∫øp qu√° nhi·ªÅu, ch·ªù t·ªõi khung gi·ªù ti·∫øp theo
                if consecutive_failures >= max_consecutive_failures:
                    print(f"[{datetime.now(vietnam_tz)}] üîÑ Scheduler: Too many errors, waiting for next scheduled time...")
                    consecutive_failures = 0
                    retry_run_time = None  # Reset retry time
                    continue
                
                # Thi·∫øt l·∫≠p retry time l√† 30 ph√∫t t·ª´ b√¢y gi·ªù
                retry_wait_minutes = 30
                retry_run_time = datetime.now(vietnam_tz) + timedelta(minutes=retry_wait_minutes)
                print(f"[{datetime.now(vietnam_tz)}] üîÑ Scheduler: ƒê·∫∑t retry time sau {retry_wait_minutes} ph√∫t v√†o {retry_run_time.strftime('%H:%M:%S')}")
                continue  # Quay l·∫°i v√≤ng l·∫∑p ƒë·ªÉ t√≠nh to√°n next_run m·ªõi
    
    # T·∫°o v√† kh·ªüi ƒë·ªông thread cho scheduler
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()


def start_auto_report_scheduler():
    """
    Kh·ªüi ƒë·ªông scheduler t·ª± ƒë·ªông t·∫°o b√°o c√°o theo khung gi·ªù c·ªë ƒë·ªãnh.
    H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi FastAPI app kh·ªüi ƒë·ªông.
    
    Returns:
        bool: True n·∫øu scheduler ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng, False n·∫øu kh√¥ng
    """
    # L·∫•y API key t·ª´ environment variables
    api_key = os.getenv('GEMINI_API_KEY')
    
    if not api_key:
        print("WARNING: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p. Auto report scheduler kh√¥ng ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
        return False
    
    # Ki·ªÉm tra n·∫øu ƒëang ch·∫°y tr√™n m√¥i tr∆∞·ªùng production ho·∫∑c c√≥ enable scheduler
    enable_scheduler = os.getenv('ENABLE_AUTO_REPORT_SCHEDULER', 'false').lower() == 'true'
    
    if enable_scheduler:
        # L·∫•y custom schedule times t·ª´ environment variable (optional)
        custom_times = os.getenv('AUTO_REPORT_SCHEDULE_TIMES')
        schedule_times = None
        
        if custom_times:
            # Parse custom times: "07:30,15:00,19:00"
            schedule_times = [time.strip() for time in custom_times.split(',')]
            print(f"INFO: S·ª≠ d·ª•ng khung gi·ªù custom: {schedule_times}")
        else:
            print("INFO: S·ª≠ d·ª•ng khung gi·ªù m·∫∑c ƒë·ªãnh: 07:30, 15:00, 19:00 (GMT+7)")
        
        schedule_auto_report(api_key, schedule_times)
        return True
    else:
        print("INFO: Auto report scheduler ch∆∞a ƒë∆∞·ª£c b·∫≠t. Thi·∫øt l·∫≠p ENABLE_AUTO_REPORT_SCHEDULER=true ƒë·ªÉ b·∫≠t.")
        return False


def create_manual_report():
    """
    T·∫°o b√°o c√°o th·ªß c√¥ng ngay l·∫≠p t·ª©c.
    H√†m n√†y c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ API endpoint ho·∫∑c command line.
    
    Returns:
        dict: K·∫øt qu·∫£ t·∫°o b√°o c√°o
    """
    api_key = os.getenv('GEMINI_API_KEY')
    
    if not api_key:
        return {
            'success': False,
            'error': 'GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p'
        }
    
    # Timezone Vi·ªát Nam
    vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    
    print(f"[{datetime.now(vietnam_tz)}] üöÄ Manual report generation started...")
    start_time = datetime.now(vietnam_tz)
    
    try:
        max_attempts = int(os.getenv('MAX_REPORT_ATTEMPTS', '3'))
        result = generate_auto_research_report(api_key, max_attempts)
        
        end_time = datetime.now(vietnam_tz)
        duration = (end_time - start_time).total_seconds()
        
        if isinstance(result, dict) and result.get('success'):
            report_id = result.get('report_id')
            print(f"[{end_time}] ‚úÖ Manual report #{report_id} created successfully in {duration:.1f}s")
            
            response = {
                'success': True,
                'report_id': report_id,
                'duration': duration,
                'message': f'B√°o c√°o #{report_id} ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong {duration:.1f}s'
            }
            
            # Gi·∫£i ph√≥ng b·ªô nh·ªõ
            del result
            gc.collect()
            print(f"[{datetime.now(vietnam_tz)}] üßπ Memory cleanup completed")
            
            return response
        else:
            error_msg = 'T·∫°o b√°o c√°o th·∫•t b·∫°i'
            if isinstance(result, dict) and result.get('errors'):
                error_msg = f"T·∫°o b√°o c√°o th·∫•t b·∫°i: {result['errors'][0] if result['errors'] else 'Unknown error'}"
            
            print(f"[{end_time}] ‚ùå Manual report failed in {duration:.1f}s: {error_msg}")
            
            response = {
                'success': False,
                'duration': duration,
                'error': error_msg
            }
            
            # Gi·∫£i ph√≥ng b·ªô nh·ªõ
            del result
            gc.collect()
            
            return response
            
    except Exception as e:
        end_time = datetime.now(vietnam_tz)
        duration = (end_time - start_time).total_seconds()
        error_msg = f"L·ªói khi t·∫°o b√°o c√°o: {str(e)}"
        print(f"[{end_time}] ‚ùå Manual report failed in {duration:.1f}s: {error_msg}")
        
        # Gi·∫£i ph√≥ng b·ªô nh·ªõ
        gc.collect()
        
        return {
            'success': False,
            'duration': duration,
            'error': error_msg
        }
