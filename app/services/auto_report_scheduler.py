import os
import gc
import threading
import time
from datetime import datetime, timezone, timedelta
from google import genai
from google.genai import types
from .report_workflow import generate_auto_research_report_langgraph
from .progress_tracker import progress_tracker





def generate_auto_research_report(api_key, max_attempts=3):
    """
    Wrapper function cho LangGraph workflow V2 ƒë·ªÉ gi·ªØ t∆∞∆°ng th√≠ch v·ªõi code c≈©.
    
    Args:
        api_key (str): API key c·ªßa Gemini
        max_attempts (int): S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa ƒë·ªÉ t·∫°o b√°o c√°o PASS
        
    Returns:
        dict: K·∫øt qu·∫£ workflow v·ªõi success status v√† report_id
    """
    try:
        result = generate_auto_research_report_langgraph(api_key, max_attempts)
        
        # ƒê·∫£m b·∫£o tr·∫£ v·ªÅ dict format
        if isinstance(result, dict):
            return result
        else:
            # Fallback cho backward compatibility
            return {'success': bool(result), 'report_id': None}
            
    except Exception as e:
        print(f"‚ùå Error in generate_auto_research_report: {e}")
        return {
            'success': False, 
            'error': str(e),
            'report_id': None
        }


def schedule_auto_report(api_key, interval_hours=6):
    """
    L√™n l·ªãch t·ª± ƒë·ªông t·∫°o b√°o c√°o m·ªói interval_hours gi·ªù v·ªõi improved error handling.
    
    Args:
        api_key (str): API key c·ªßa Gemini
        interval_hours (int): Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn t·∫°o b√°o c√°o (gi·ªù)
    """
    def run_scheduler():
        consecutive_failures = 0
        max_consecutive_failures = 3
        
        while True:
            try:
                start_time = datetime.now()
                print(f"[{start_time}] üöÄ Scheduler: B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o t·ª± ƒë·ªông...")
                
                # Ch·∫°y t·∫°o b√°o c√°o v·ªõi s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa
                max_attempts = int(os.getenv('MAX_REPORT_ATTEMPTS', '3'))
                
                result = generate_auto_research_report(api_key, max_attempts)
                
                if isinstance(result, dict) and result.get('success'):
                    consecutive_failures = 0  # Reset failure counter
                    end_time = datetime.now()
                    duration = (end_time - start_time).total_seconds()
                    report_id = result.get('report_id')
                    print(f"[{end_time}] ‚úÖ Scheduler: B√°o c√°o #{report_id} t·∫°o th√†nh c√¥ng trong {duration:.1f}s")
                    
                    # Gi·∫£i ph√≥ng b·ªô nh·ªõ sau khi ho√†n th√†nh b√°o c√°o
                    del result
                    gc.collect()
                    print(f"[{datetime.now()}] üßπ Memory cleanup completed")
                    
                elif isinstance(result, bool) and result:
                    consecutive_failures = 0  # Reset failure counter  
                    end_time = datetime.now()
                    duration = (end_time - start_time).total_seconds()
                    print(f"[{end_time}] ‚úÖ Scheduler: B√°o c√°o t·∫°o th√†nh c√¥ng trong {duration:.1f}s")
                    
                    # Gi·∫£i ph√≥ng b·ªô nh·ªõ
                    del result
                    gc.collect()
                    print(f"[{datetime.now()}] üßπ Memory cleanup completed")
                else:
                    consecutive_failures += 1
                    error_info = ""
                    if isinstance(result, dict) and result.get('errors'):
                        error_info = f" - Errors: {result['errors'][:2]}"  # Show first 2 errors
                    
                    print(f"[{datetime.now()}] ‚ùå Scheduler: T·∫°o b√°o c√°o th·∫•t b·∫°i ({consecutive_failures}/{max_consecutive_failures}){error_info}")
                    
                    # Gi·∫£i ph√≥ng b·ªô nh·ªõ ngay c·∫£ khi th·∫•t b·∫°i
                    del result
                    gc.collect()
                    
                    # N·∫øu th·∫•t b·∫°i li√™n ti·∫øp qu√° nhi·ªÅu, tƒÉng interval
                    if consecutive_failures >= max_consecutive_failures:
                        extended_interval = interval_hours * 2
                        print(f"[{datetime.now()}] ‚ö†Ô∏è Scheduler: Too many failures, extending interval to {extended_interval}h")
                        time.sleep(extended_interval * 3600)
                        consecutive_failures = 0  # Reset counter
                        continue
                    
            except Exception as e:
                consecutive_failures += 1
                print(f"[{datetime.now()}] ‚ùå Scheduler error ({consecutive_failures}/{max_consecutive_failures}): {e}")
                
                # Gi·∫£i ph√≥ng b·ªô nh·ªõ khi c√≥ exception
                gc.collect()
                
                # N·∫øu l·ªói li√™n ti·∫øp qu√° nhi·ªÅu, restart scheduler
                if consecutive_failures >= max_consecutive_failures:
                    print(f"[{datetime.now()}] üîÑ Scheduler: Restarting due to consecutive failures...")
                    time.sleep(300)  # Wait 5 minutes before restart
                    consecutive_failures = 0
                    continue
            
            # Ch·ªù interval_hours gi·ªù tr∆∞·ªõc khi ch·∫°y l·∫ßn ti·∫øp theo
            next_run = datetime.now().replace(microsecond=0) + timedelta(hours=interval_hours)
            print(f"[{datetime.now()}] ‚è∞ Scheduler: Next run scheduled at {next_run}")
            time.sleep(interval_hours * 3600)
    
    # T·∫°o v√† kh·ªüi ƒë·ªông thread cho scheduler
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    print(f"[{datetime.now()}] üéØ Auto report scheduler started (interval: {interval_hours}h, max failures: 3)")


def start_auto_report_scheduler():
    """
    Kh·ªüi ƒë·ªông scheduler t·ª± ƒë·ªông t·∫°o b√°o c√°o.
    H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi FastAPI app kh·ªüi ƒë·ªông.
    
    Returns:
        bool: True n·∫øu scheduler ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng, False n·∫øu kh√¥ng
    """
    # L·∫•y API key t·ª´ environment variables
    api_key = os.getenv('GEMINI_API_KEY')
    
    if not api_key:
        print("WARNING: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p. Auto report scheduler kh√¥ng ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
        return False
    
    # Ki·ªÉm tra n·∫øu ƒëang ch·∫°y tr√™n m√¥i tr∆∞·ªùng production ho·∫∑c c√≥ enable scheduler
    enable_scheduler = os.getenv('ENABLE_AUTO_REPORT_SCHEDULER', 'false').lower() == 'true'
    
    if enable_scheduler:
        # L·∫•y interval t·ª´ environment variable, m·∫∑c ƒë·ªãnh l√† 3 gi·ªù
        interval_hours = int(os.getenv('AUTO_REPORT_INTERVAL_HOURS', '3'))
        schedule_auto_report(api_key, interval_hours)
        return True
    else:
        print("INFO: Auto report scheduler ch∆∞a ƒë∆∞·ª£c b·∫≠t. Thi·∫øt l·∫≠p ENABLE_AUTO_REPORT_SCHEDULER=true ƒë·ªÉ b·∫≠t.")
        return False


def create_manual_report():
    """
    T·∫°o b√°o c√°o th·ªß c√¥ng ngay l·∫≠p t·ª©c.
    H√†m n√†y c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ API endpoint ho·∫∑c command line.
    
    Returns:
        dict: K·∫øt qu·∫£ t·∫°o b√°o c√°o
    """
    api_key = os.getenv('GEMINI_API_KEY')
    
    if not api_key:
        return {
            'success': False,
            'error': 'GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p'
        }
    
    print(f"[{datetime.now()}] üöÄ Manual report generation started...")
    start_time = datetime.now()
    
    try:
        max_attempts = int(os.getenv('MAX_REPORT_ATTEMPTS', '3'))
        result = generate_auto_research_report(api_key, max_attempts)
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        if isinstance(result, dict) and result.get('success'):
            report_id = result.get('report_id')
            print(f"[{end_time}] ‚úÖ Manual report #{report_id} created successfully in {duration:.1f}s")
            
            response = {
                'success': True,
                'report_id': report_id,
                'duration': duration,
                'message': f'B√°o c√°o #{report_id} ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong {duration:.1f}s'
            }
            
            # Gi·∫£i ph√≥ng b·ªô nh·ªõ
            del result
            gc.collect()
            print(f"[{datetime.now()}] üßπ Memory cleanup completed")
            
            return response
        else:
            error_msg = 'T·∫°o b√°o c√°o th·∫•t b·∫°i'
            if isinstance(result, dict) and result.get('errors'):
                error_msg = f"T·∫°o b√°o c√°o th·∫•t b·∫°i: {result['errors'][0] if result['errors'] else 'Unknown error'}"
            
            print(f"[{end_time}] ‚ùå Manual report failed in {duration:.1f}s: {error_msg}")
            
            response = {
                'success': False,
                'duration': duration,
                'error': error_msg
            }
            
            # Gi·∫£i ph√≥ng b·ªô nh·ªõ
            del result
            gc.collect()
            
            return response
            
    except Exception as e:
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        error_msg = f"L·ªói khi t·∫°o b√°o c√°o: {str(e)}"
        print(f"[{end_time}] ‚ùå Manual report failed in {duration:.1f}s: {error_msg}")
        
        # Gi·∫£i ph√≥ng b·ªô nh·ªõ
        gc.collect()
        
        return {
            'success': False,
            'duration': duration,
            'error': error_msg
        }
