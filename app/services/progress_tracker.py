import time
import logging
from datetime import datetime
from typing import Dict, Any
from threading import Lock

# Thi·∫øt l·∫≠p logger cho progress tracker
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# T·∫°o formatter cho logs
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# T·∫°o console handler n·∫øu ch∆∞a c√≥
if not logger.handlers:
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

class ProgressTracker:
    """ƒê∆°n gi·∫£n h√≥a theo d√µi ti·∫øn ƒë·ªô - ch·ªâ hi·ªÉn th·ªã step ch√≠nh v·ªõi substep queue"""
    
    def __init__(self):
        self.current_progress = {}
        self.lock = Lock()
        
    def start_progress(self, session_id: str, total_steps: int = 9):
        """B·∫Øt ƒë·∫ßu theo d√µi ti·∫øn ƒë·ªô cho m·ªôt session. C√≥ th·ªÉ truy·ªÅn v√†o s·ªë b∆∞·ªõc (total_steps) ƒë·ªông."""
        logger.info(f"Starting progress tracking for session: {session_id} | Total steps: {total_steps}")
        
        with self.lock:
            self.current_progress[session_id] = {
                'step': 0,
                'total_steps': total_steps,
                'current_step_name': 'Kh·ªüi t·∫°o...',
                'percentage': 0,
                'status': 'running',
                'start_time': time.time(),
                'details': '',
                'last_update': time.time()
            }
        
        logger.info(f"Progress tracking initialized successfully for session: {session_id}")
    
    def update_step(self, session_id: str, step: int = None, step_name: str = None, details: str = ''):
        """C·∫≠p nh·∫≠t progress - g·ªôp step v√† substep th√†nh m·ªôt"""
        timestamp = datetime.now().strftime("[%H:%M:%S.%f]")[:-3]  # Include milliseconds
        
        with self.lock:
            if session_id in self.current_progress:
                progress = self.current_progress[session_id]
                
                # N·∫øu c√≥ step number v√† step_name, ƒë√¢y l√† major step
                if step is not None and step_name is not None:
                    progress['step'] = step
                    progress['current_step_name'] = f"{timestamp} üîÑ B∆∞·ªõc {step}: {step_name}"
                    progress['percentage'] = int((step / progress['total_steps']) * 100)
                    progress['details'] = f"{timestamp} {details}" if details else ""
                    progress['last_update'] = time.time()
                    
                    # Log th√¥ng tin step ch√≠nh
                    logger.info(f"Session {session_id} - Step {step}/{progress['total_steps']} ({progress['percentage']}%): {step_name}")
                    if details:
                        logger.debug(f"Session {session_id} - Step details: {details}")
                
                # N·∫øu ch·ªâ c√≥ details, ƒë√¢y l√† log entry detail
                elif details is not None:
                    timestamped_details = f"{timestamp} {details}"
                    progress['details'] = timestamped_details
                    progress['last_update'] = time.time()
                    
                    # Log chi ti·∫øt
                    logger.info(f"Session {session_id} - Detail: {details}")
            else:
                logger.warning(f"Session {session_id} not found in progress tracker")
    
    def update_substep(self, session_id: str, details: str):
        """Backward compatibility - g·ªçi update_step v·ªõi ch·ªâ details"""
        self.update_step(session_id, details=details)
    
    def get_progress(self, session_id: str) -> Dict[str, Any]:
        """L·∫•y ti·∫øn ƒë·ªô hi·ªán t·∫°i c·ªßa m·ªôt session"""
        with self.lock:
            return self.current_progress.get(session_id, None)
    
    def complete_progress(self, session_id: str, success: bool = True, report_id: int = None):
        """Ho√†n th√†nh ti·∫øn ƒë·ªô"""
        timestamp = datetime.now().strftime("[%H:%M:%S.%f]")[:-3]  # Include milliseconds
        
        with self.lock:
            if session_id in self.current_progress:
                progress = self.current_progress[session_id]
                progress['step'] = progress['total_steps']
                progress['percentage'] = 100
                progress['status'] = 'completed' if success else 'error'
                progress['current_step_name'] = f"{timestamp} ‚úÖ Ho√†n th√†nh!" if success else f"{timestamp} ‚ùå C√≥ l·ªói x·∫£y ra"
                progress['report_id'] = report_id
                progress['end_time'] = time.time()
                progress['last_update'] = time.time()
                
                # T√≠nh th·ªùi gian th·ª±c hi·ªán
                duration = progress['end_time'] - progress['start_time']
                minutes = int(duration // 60)
                seconds = int(duration % 60)
                
                if success:
                    logger.info(f"Session {session_id} completed successfully in {minutes}m {seconds}s"
                              + (f" | Report ID: {report_id}" if report_id else ""))
                else:
                    logger.error(f"Session {session_id} completed with errors after {minutes}m {seconds}s")
            else:
                logger.warning(f"Session {session_id} not found when trying to complete progress")
    
    def error_progress(self, session_id: str, error_msg: str):
        """B√°o l·ªói trong qu√° tr√¨nh"""
        timestamp = datetime.now().strftime("[%H:%M:%S.%f]")[:-3]  # Include milliseconds
        
        with self.lock:
            if session_id in self.current_progress:
                progress = self.current_progress[session_id]
                progress['status'] = 'error'
                progress['current_step_name'] = f"{timestamp} ‚ùå L·ªói"
                progress['details'] = f"{timestamp} {error_msg}"
                progress['end_time'] = time.time()
                progress['last_update'] = time.time()
                
                # T√≠nh th·ªùi gian th·ª±c hi·ªán tr∆∞·ªõc khi l·ªói
                duration = progress['end_time'] - progress['start_time']
                minutes = int(duration // 60)
                seconds = int(duration % 60)
                
                logger.error(f"Session {session_id} encountered error after {minutes}m {seconds}s: {error_msg}")
            else:
                logger.warning(f"Session {session_id} not found when trying to log error: {error_msg}")

# Global instance
progress_tracker = ProgressTracker()
